name: CI for MCDR

on:
  push:
    paths:
      - ".github/**"
      - "mcdreforged/**"
      - "tests/**"
      - "*.py"

env:
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}

jobs:
  test:
    uses: ./.github/workflows/test.yml

  assemble:
    needs: test
    uses: ./.github/workflows/assemble.yml

  pypi_upload:
    runs-on: ubuntu-latest
    name: Publish package to (Test)PyPI
    needs: test
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install -U pip
        pip install setuptools wheel

    - name: Create distribution
      id: distribution
      run: |
        python setup.py sdist bdist_wheel

    - name: Publish distribution to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

    - name: Publish distribution to PyPI
      if: env.IS_RELEASE == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - uses: actions/upload-artifact@v3
      with:
        name: MCDReforged package distribution for ${{ github.sha }}
        path: dist/

    outputs:
      version: ${{ steps.distribution.outputs.version }}

  image:
    name: Docker images
    runs-on: ubuntu-latest
    needs: pypi_upload
    strategy:
      matrix:
        slim: ['false', 'true']
        python: ['3.10', '3.11', '3.12']  # last 3 minor versions

    steps:
    - uses: actions/checkout@v3

    - name: Prepare build config
      uses: actions/github-script@v7
      id: config
      with:
        script: |
          const slim = process.env.SLIM
          const python = process.env.PYTHON
          const isRelease = process.env.IS_RELEASE === 'true'

          if (isRelease) {
            core.setOutput('pypi_simple', 'https://pypi.org/simple')
          } else {
            core.setOutput('pypi_simple', 'https://test.pypi.org/simple')
          }
          
          let meta_tags_base = [
            'type=ref,event=branch,suffix=',
            'type=semver,pattern={{version}}',
            'type=semver,pattern={{major}}.{{minor}}',
          ]
          let meta_tags_latest = []
          let suffixes = [`-py${python}`]

          if (python === '3.11') {  // 3.11 is the default python version
            suffixes.push('')  // add a no-python suffixes
            if (isRelease) {
              meta_tags_latest.push('latest')
            }
          }
          
          if (slim === 'true') {
            core.setOutput('platforms', 'linux/amd64')
            core.setOutput('base_image_tag', `${python}-slim`)
            suffixes = suffixes.map(item => item + '-slim');
            meta_tags_latest = meta_tags_latest.map(item => item + '-slim');
          } else {
            core.setOutput('platforms', 'linux/amd64,linux/arm64')
            core.setOutput('base_image_tag', python)
          }
          console.log(`suffixes: ${JSON.stringify(suffixes)}`)
          
          let meta_tags = suffixes.flatMap(suffix => meta_tags_base.map(t => t + suffix)).concat(meta_tags_latest)
          core.setOutput('tags', meta_tags.join('\n'))
          console.log(`meta_tags: ${JSON.stringify(meta_tags)}`)
      env:
        SLIM: ${{ matrix.slim }}
        PYTHON: ${{ matrix.python }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: fallenbreath
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: mcdreforged/mcdreforged
        tags: ${{ steps.config.outputs.tags }}
        flavor: latest=false

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Wait for PyPI index update
      run: |
        start_time=$(date +%s)
        while true; do
          if pip3 install "mcdreforged==${VERSION}" -i "${PYPI_SIMPLE}" --dry-run --ignore-installed --no-deps; then
            echo "Version ${VERSION} exists on ${PYPI_SIMPLE}"
            break
          else
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [ "$elapsed_time" -ge 600 ]; then
              echo "Failed to find package version ${VERSION} on ${PYPI_SIMPLE} after 10 minutes"
              exit 1
            fi
            echo "Version ${VERSION} not exist on ${PYPI_SIMPLE}. Checking again in 5 seconds"
            sleep 5
          fi
        done
      env:
        VERSION: ${{ needs.pypi_upload.outputs.version }}
        PYPI_SIMPLE: ${{ steps.config.outputs.pypi_simple }}

    - name: Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        platforms: ${{ steps.config.outputs.platforms }}
        push: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' }}
        file: docker/Dockerfile
        context: docker
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BASE_IMAGE_TAG=${{ steps.config.outputs.base_image_tag }}
          MCDR_REQUIREMENT=${{ needs.pypi_upload.outputs.version }}
          PYPI_INDEX=${{ steps.config.outputs.pypi_simple }}
