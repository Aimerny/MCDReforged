
msgid ""
msgstr ""
"Project-Id-Version:  mcdreforged\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-09 16:48+0800\n"
"PO-Revision-Date: 2021-01-23 10:38+0800\n"
"Last-Translator: Alex3236 <alex3236@qq.com>\n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../plugin_dev/basic.rst:3
msgid "MCDR Plugin"
msgstr "MCDR 插件"

#: ../plugin_dev/basic.rst:6
msgid "What is a MCDR plugin"
msgstr "什么是 MCDR 插件？"

#: ../plugin_dev/basic.rst:8
msgid ""
"An MCDR plugin is a python source file with ``.py`` file extension "
"located in plugin directories. The list of the plugin directory can be "
"defined inside the `configure file "
"<../configure.html#plugin_directories>`__"
msgstr ""
"MCDR 插件是位于插件目录中的一个以 ``.py`` 为后缀的 python 源文件。插件目录的列表可以在 `配置文件 "
"<../configure.html#plugin_directories>`__ 中定义。"

#: ../plugin_dev/basic.rst:10
msgid ""
"At start up, MCDR will automatically load every plugin inside the plugin "
"directories. Additionally, MCDR will append all the plugin directories "
"into ``sys.path``, so plugins can import modules placed inside the plugin"
" folders directly"
msgstr ""
"启动时，MCDR 会自动加载插件目录内的每个插件。此外，MCDR 会将所有插件目录加入到 ``sys.path`` "
"中，以使插件可以直接导入插件文件夹中的模块。"

#: ../plugin_dev/basic.rst:12
msgid ""
"Check the `example plugin repository <https://github.com/MCDReforged"
"/MCDReforged-ExamplePlugin>`__ or the `plugin template repository "
"<https://github.com/MCDReforged/MCDReforged-PluginTemplate>`__ for more "
"references"
msgstr ""
"你可以通过查阅 `样例插件仓库 <https://github.com/MCDReforged/MCDReforged-"
"ExamplePlugin>`__ 或者 `插件模板仓库 <https://github.com/MCDReforged/MCDReforged-"
"PluginTemplate>`__ 来获得更多的参考。"

#: ../plugin_dev/basic.rst:15
msgid "Quick Start"
msgstr "快速开始"

#: ../plugin_dev/basic.rst:17
msgid ""
"Open one of the plugin directories of MCDR, create a file named "
"``HelloWorld.py``"
msgstr "打开你设置的 MCDR 的插件目录之一，创建一个名为 ``HelloWorld.py`` 的文件。"

#: ../plugin_dev/basic.rst:24
msgid "open it and enter these code"
msgstr "打开它并输入如下代码："

#: ../plugin_dev/basic.rst:38
msgid ""
"Return to MCDR console, enter ``!!MCDR reload plugin``, and you should "
"see the hello world message from your plugin"
msgstr "返回MCDR控制台，输入 ``!!MCDR reload plugin`` 。你应该会看到插件发送了一条 hello world。"

#: ../plugin_dev/basic.rst:44
msgid "Great, you have successfully created your first plugin"
msgstr "好耶，你成功写出了你的第一个插件！"

#: ../plugin_dev/basic.rst:47
msgid "Metadata"
msgstr "元数据"

#: ../plugin_dev/basic.rst:49
msgid ""
"The meta data field provides the basic information of the plugin. It's "
"declared as a json object contains several key-value, e.g.:"
msgstr "元数据提供了插件的基本信息。它是一个包含多个键值对的 json 对象，如："

#: ../plugin_dev/basic.rst:64
msgid ""
"Different `plugin format <plugin_format.rst>`__ has different ways to "
"declare its metadata, but the contents of metadata are the same"
msgstr "不同的 `插件格式 <plugin_format.rst>`__ 有着不同的声明元数据的方法，但其元数据的内容是一致的。"

#: ../plugin_dev/basic.rst:66
msgid "See the `metadata document <metadata.rst>`__ for more information"
msgstr "见 `元数据文档 <metadata.rst>`__ 以获取更多有关元数据的信息。"

#: ../plugin_dev/basic.rst:70
msgid "Plugin Registry"
msgstr "插件注册表"

#: ../plugin_dev/basic.rst:72
msgid ""
"Plugin registry is a collection of things that plugin registered for. It "
"will get cleaned up every time before the plugin gets loaded, so you'd "
"better register them in `Plugin_Load <event.html#plugin-load>`__ event"
msgstr ""
"插件注册表是一个插件注册的东西的集合。在每次加载插件之前，它都会被清空，因此你最好在 `插件被加载 <event.html#plugin-"
"loaded>`__ 事件中注册它们。"

#: ../plugin_dev/basic.rst:75
msgid "Event listeners"
msgstr "事件监听器"

#: ../plugin_dev/basic.rst:77
msgid "There are 2 methods to register an event listener for you plugin"
msgstr "有两种方法可以注册事件侦听器的插件。"

#: ../plugin_dev/basic.rst:81
msgid ""
"Declare a function inside the global slope with the specific name. It's "
"the legacy registering method to register a listener and it only works "
"with events provided by MCDR. Check `here <event.html#default-event-"
"listener>`__ for more detail"
msgstr ""
"使用特定名称在全局范围内声明一个函数。它是注册监听器的老办法，仅适用于 MCDR 提供的事件。有关详细信息，请查看 `此处 <event.html"
"#default-event-listener>`__ 。"

#: ../plugin_dev/basic.rst:83
msgid ""
"For example, the widely-used function below is a default `Plugin Loaded "
"<event.html#plugin-loaded>`__ event listener"
msgstr "例如，下面广泛使用的函数是默认的 `插件被加载 <event.html#plugin-loaded>`__ 事件监听器。"

#: ../plugin_dev/basic.rst:91
msgid ""
"Manually invoke ``server.register_event_listener`` method to register an "
"event listener. You can specify the callable object and the priority for "
"the event listener"
msgstr "手动调用 ``server.register_event_listener`` 方法来注册事件监听器。你可以为事件监听器指定可调用对象和优先级。"

#: ../plugin_dev/basic.rst:93
msgid ""
"Check `here <event.html#register-a-event-listener>`__ for more detail "
"about event listener registering"
msgstr "查看 `此处 <event.html#register-a-event-listener>`__ 以获取有关事件监听器注册的更多详细信息。"

#: ../plugin_dev/basic.rst:95
msgid "Here some examples about manually register event listeners"
msgstr "以下是一些关于手动注册事件监听器的例子："

#: ../plugin_dev/basic.rst:109
msgid ""
"Take a look at the reference of ``register_event_listener`` method in "
"`ServerInterface <classes/ServerInterface.html#register-event-"
"listener>`__ document for more detail"
msgstr ""
"请参阅 `ServerInterface <classes/ServerInterface.html#register-event-"
"listener>`__ 文档中有关 ``register_event_listener`` 方法的说明，以了解更多详细信息。"

#: ../plugin_dev/basic.rst:112
msgid "Command"
msgstr "指令"

#: ../plugin_dev/basic.rst:114
msgid ""
"Rather than manually parsing ``info.content`` inside user info event "
"callback like ``on_user_info``, MCDR provides a command system for "
"plugins to register their commands"
msgstr ""
"除了在如 ``on_user_info`` 的用户信息事件回调中手动解析用户输入 ``info.content``，MCDR "
"还为插件提供了一个指令构建系统来帮助插件注册它们的指令。"

#: ../plugin_dev/basic.rst:116
msgid ""
"Check the `command <command>`__ document for more detail about building a"
" command tree"
msgstr "查看 `指令 <command>`__ 文档以获取有关构建指令树的更多详细信息。"

#: ../plugin_dev/basic.rst:118
msgid ""
"Assuming that you have already built a command tree with root literal "
"node *root*, then you can use the following code to register your command"
" tree in MCDR"
msgstr "假设你已经使用根文字节点 *root* 构建了指令树，则你可以使用以下代码在 MCDR 中注册这一棵指令树："

#: ../plugin_dev/basic.rst:124
msgid ""
"Take a look at the reference of ``register_command`` method in "
"`ServerInterface <classes/ServerInterface.html#register-command>`__ "
"document for more details of its usage"
msgstr ""
"查看 `ServerInterface <classes/ServerInterface.html#register-command>`__ "
"文档中有关 ``register_command`` 方法的参考，以获取其用法的更多详细信息。"

#: ../plugin_dev/basic.rst:127
msgid "Help message"
msgstr "帮助信息"

#: ../plugin_dev/basic.rst:129
msgid ""
"Plugin can register its help message with "
"``server.register_help_message`` to MCDR, so that users can use `!!help "
"command <../command.html#help-command>`__ to view the help messages of "
"all commands"
msgstr ""
"插件可以使用 ``server.register_help_message`` 将其帮助消息注册到MCDR，以便用户使用 `!!help 指令 "
"<../command.html#help-command>`__ 来查看所有插件的帮助消息。"

#: ../plugin_dev/basic.rst:131
msgid ""
"Take a look at the reference of ``register_help_message`` method in "
"`ServerInterface <classes/ServerInterface.html#register-help-message>`__ "
"document for more details of its usage"
msgstr ""
"查看 `ServerInterface <classes/ServerInterface.html#register-help-"
"message>`__ 文档中有关 ``register_help_message`` 方法的参考，以了解其用法的更多详细信息。"

